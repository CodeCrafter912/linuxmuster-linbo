#!/usr/bin/make -f
#
# Makefile zur Erstellung der beiden Kernel 32-/64-bit
# sowie des cloop-Moduls.
# Beides wird dann in die jeweiligen sysroot-Verzeichnisse installiert.
# Frank Sch√ºtte
# 2016
# GPL v3
#

CURDIR=$(shell pwd)

include common.mk

# kernel
VESAMODE=785 # 640x480, 64k colors
#VESAMODE=771 # 800x600, 256 colors
# VESAMODE=0 # VGA16
# VESAMODE=791 # 1024x768, 64k colors # Currently not working
KERNELDIR=$(CURDIR)/linux-$(KVERS)
KMAINVERS=$(shell echo $(KVERS) | sed -e 's/.0$$//')
#KERNEL_URL=https://www.kernel.org/pub/linux/kernel/v4.x
KERNEL_URL=$(LML_URL)

# cloop
CLOOP_ARCHIVE=$(CACHEDIR)/$(shell grep cloop_ $(DEBIANDIR)/md5sums.src | awk '{ print $$2 }')
CLOOPDIR=$(CURDIR)/cloop-$(shell echo $(notdir $(CLOOP_ARCHIVE)) | awk -F_ '{ print $$2 }' | sed -e 's/.tar.xz//')
#CLOOP_URL=http://ftp.de.debian.org/debian/pool/main/c/cloop
CLOOP_URL=$(LML_URL)

BUILDCL32:=$(BUILDDIR)/cloop32-$(KVERS)
BUILDCL64:=$(BUILDDIR)/cloop64-$(KVERS)

DIRS:=$(CACHEDIR) $(KERNELDIR) $(BUILD32) $(BUILD64) $(BUILDCL32) $(BUILDCL64)

# targets

all: build

$(DIRS):
	for i in $(DIRS); do \
	    mkdir -p $$i; \
	done;

$(KERNEL_ARCHIVE): | $(DIRS)
	wget -nc --directory-prefix=$(CACHEDIR) $(KERNEL_URL)/$(notdir $(KERNEL_ARCHIVE))
	cd $(CACHEDIR); grep $(notdir $(KERNEL_ARCHIVE)) $(DEBIANDIR)/md5sums.src | md5sum -c

$(CLOOP_ARCHIVE): | $(DIRS)
	wget -nc --directory-prefix=$(CACHEDIR) $(CLOOP_URL)/$(notdir $(CLOOP_ARCHIVE))
	cd $(CACHEDIR); grep $(notdir $(CLOOP_ARCHIVE)) $(DEBIANDIR)/md5sums.src | md5sum -c

$(KERNELDIR)/Makefile: $(KERNEL_ARCHIVE)
	echo "[1mUnpacking $(KERNEL_ARCHIVE)...[0m"
	tar xf $(KERNEL_ARCHIVE) -C $(CURDIR)
#	mv $(CURDIR)/linux-$(KMAINVERS) $(CURDIR)/linux-$(KVERS)
	touch $(KERNELDIR)/Makefile

$(CLOOPDIR)/Makefile: $(CLOOP_ARCHIVE)
	echo "[1mUnpacking $(CLOOP_ARCHIVE)...[0m"
	tar xf $(CLOOP_ARCHIVE) -C $(CURDIR)
	touch $(CLOOPDIR)/Makefile

$(BUILD32)/.config: $(KERNELDIR)/Makefile $(CONFDIR)/kernel.conf $(CONFDIR)/initramfs_kernel.conf
	rm -f $(BUILD64)/usr/initramfs_data.cpio.gz
	cp $(CONFDIR)/initramfs_kernel.conf $(BUILDDIR)/initramfs_kernel.conf
	cp $(CONFDIR)/kernel.conf $(BUILD32)/.config
	cd $(KERNELDIR); ARCH=i386 CFLAGS=-m32 make O=$(BUILD32) oldconfig

$(BUILD64)/.config: $(KERNELDIR)/Makefile $(CONFDIR)/kernel64.conf $(CONFDIR)/initramfs_kernel.conf
	rm -f $(BUILD64)/usr/initramfs_data.cpio.gz
	cp $(CONFDIR)/initramfs_kernel.conf $(BUILDDIR)/initramfs_kernel.conf
	cp $(CONFDIR)/kernel64.conf $(BUILD64)/.config
	cd $(KERNELDIR); ARCH=x86_64 make O=$(BUILD64) oldconfig

$(BUILDCL32)/Makefile: $(CLOOPDIR)/Makefile
	cd $(BUILDCL32); cp -R $(CLOOPDIR)/* .
	touch $(BUILDCL32)/Makefile

$(BUILDCL64)/Makefile: $(CLOOPDIR)/Makefile
	cd $(BUILDCL64); cp -R $(CLOOPDIR)/* .
	touch $(BUILDCL64)/Makefile

configure: config32 config64

config32: $(BUILD32)/.config 

config64: $(BUILD64)/.config

build: build32 build64

build32: $(BUILD32)/vmlinuz 

build64: $(BUILD64)/vmlinuz

$(BUILD32)/vmlinuz: $(BUILD32)/.config $(BUILDDIR)/initramfs_kernel.conf
	echo "[1mBuilding 32bit LINBO kernel...[0m"
	cd $(KERNELDIR) ; ARCH=i386 CFLAGS=-m32 make O=$(BUILD32) bzImage modules

$(BUILD64)/vmlinuz: $(BUILD64)/.config $(BUILDDIR)/initramfs_kernel.conf
	echo "[1mBuilding 64bit LINBO kernel...[0m"
	cd $(KERNELDIR) ; ARCH=x86_64 make O=$(BUILD64) bzImage modules

$(BUILDCL32)/cloop.ko: $(BUILDCL32)/Makefile $(BUILD32)/Makefile
	echo "[1mBuilding 32bit cloop module...[0m"
	cd $(BUILDCL32); make KERNEL_DIR=$(BUILD32) clean
	cd $(BUILDCL32); PATH=$(TOOLCHAIN):$(PATH) ARCH=i386 CFLAGS=-m32 make KERNEL_DIR=$(BUILD32) cloop.ko

$(BUILDCL64)/cloop.ko: $(BUILDCL64)/Makefile $(BUILD64)/Makefile
	echo "[1mBuilding 64bit cloop module...[0m"
	cd $(BUILDCL64); make KERNEL_DIR=$(BUILD64) clean
	cd $(BUILDCL64); ARCH=x86_64 make KERNEL_DIR=$(BUILD64) cloop.ko

distclean: clean
	rm -rf $(KERNELDIR)
	rm -rf $(CLOOPDIR)

clean: 
	rm -rf $(BUILD32)
	rm -rf $(BUILD64)
	rm -f $(BUILDDIR)/initramfs_kernel.conf
	rm -rf $(BUILDCL32)
	rm -rf $(BUILDCL64)

install: $(addsuffix /lib/modules/modules.dep, $(SYSROOT) $(SYSROOT64)) $(SYSROOT)/linbo $(SYSROOT64)/linbo64

$(SYSROOT)/linbo $(SYSROOT)/lib/modules/modules.dep: $(BUILD32)/vmlinuz $(BUILDCL32)/cloop.ko
	cd $(BUILD32) && mkdir -p $(SYSROOT) ; make ARCH=i386 INSTALL_MOD_PATH=$(SYSROOT) modules_install
	mkdir -p $(SYSROOT)/lib/modules/$(KVERS)/kernel/drivers/block
	cp $(BUILDCL32)/cloop.ko $(SYSROOT)/lib/modules/$(KVERS)/kernel/drivers/block/
	cd $(BUILD32) && mkdir -p $(SYSROOT) ; make ARCH=i386 INSTALL_HDR_PATH=$(SYSROOT)/usr headers_install
	cd $(BUILD32) && mkdir -p $(SYSROOT) ; make ARCH=i386 INSTALL_PATH=$(SYSROOT) install
	install $(SYSROOT)/vmlinuz-$(KVERS) $(SYSROOT)/linbo
	/sbin/depmod -a -b $(SYSROOT) $(KVERS)

$(SYSROOT64)/linbo64 $(SYSROOT64)/lib/modules/modules.dep: $(BUILD64)/vmlinuz $(BUILDCL64)/cloop.ko
	cd $(BUILD64) && mkdir -p $(SYSROOT64) ; make ARCH=x86_64 INSTALL_MOD_PATH=$(SYSROOT64) modules_install
	mkdir -p $(SYSROOT64)/lib/modules/$(KVERS)/kernel/drivers/block
	cp $(BUILDCL64)/cloop.ko $(SYSROOT64)/lib/modules/$(KVERS)/kernel/drivers/block/
	cd $(BUILD64) && mkdir -p $(SYSROOT64) ; make ARCH=x86_64 INSTALL_HDR_PATH=$(SYSROOT64)/usr headers_install
	cd $(BUILD64) && mkdir -p $(SYSROOT64) ; make ARCH=x86_64 INSTALL_PATH=$(SYSROOT64) install
	install $(SYSROOT64)/vmlinuz-$(KVERS) $(SYSROOT64)/linbo64
	/sbin/depmod -a -b $(SYSROOT64) $(KVERS)

.PHONY: all $(DIRS)
.PHONY: distclean clean
.PHONY: build build32 build64
.PHONY: install
.PHONY: configure config32 config64
