#!/usr/bin/make -f
#
# Frank Sch√ºtte
# 2016
# GPL v3
#

include common.mk

# kernel
VESAMODE=785 # 640x480, 64k colors
#VESAMODE=771 # 800x600, 256 colors
# VESAMODE=0 # VGA16
# VESAMODE=791 # 1024x768, 64k colors # Currently not working
KERNEL_ARCHIVE_NAME=$(shell grep " linux-" $(DEBIANDIR)/md5sums.src | awk '{ print $$2 }')
KERNEL_ARCHIVE=$(CACHEDIR)/$(KERNEL_ARCHIVE_NAME)
KVERS=$(shell echo $(KERNEL_ARCHIVE_NAME) | sed -e 's/linux-//' | sed -e 's/.tar.xz//')
KERNELDIR=$(CURDIR)/linux-$(KVERS)
KMAINVERS=$(shell echo $(KVERS) | sed -e 's/.0$$//')
#KERNEL_URL=https://www.kernel.org/pub/linux/kernel/v4.x
KERNEL_URL=$(LML_URL)

# kernel32
BUILD32:=$(BUILDDIR)/linux32-$(KVERS)
# kernel64
BUILD64:=$(BUILDDIR)/linux64-$(KVERS)

DIRS:=$(CACHEDIR) $(KERNELDIR) $(BUILD32) $(BUILD64)

# targets

$(DIRS):
	for i in $(DIRS); do \
	    mkdir -p $$i; \
	done;

$(KERNEL_ARCHIVE): | $(DIRS)
	wget --directory-prefix=$(CACHEDIR) $(KERNEL_URL)/$(KERNEL_ARCHIVE_NAME)
	( cd $(CACHEDIR); grep $(KERNEL_ARCHIVE_NAME) $(DEBIANDIR)/md5sums.src | md5sum -c )

$(KERNELDIR)/Makefile: $(KERNEL_ARCHIVE)
	echo "[1mUnpacking $(KERNEL_ARCHIVE)...[0m"
	tar xf $(KERNEL_ARCHIVE) -C $(CURDIR)
#	mv $(CURDIR)/linux-$(KMAINVERS) $(CURDIR)/linux-$(KVERS)

$(BUILD32)/.config: $(KERNELDIR)/Makefile $(CONFDIR)/kernel.conf $(CONFDIR)/initramfs_kernel.conf
	rm -f $(BUILD64)/usr/initramfs_data.cpio.gz
	cp $(CONFDIR)/initramfs_kernel.conf $(BUILDDIR)/initramfs_kernel.conf
	cp $(CONFDIR)/kernel.conf $(BUILD32)/.config
	(cd $(KERNELDIR); ARCH=i386 CFLAGS=-m32 make O=$(BUILD32) oldconfig )

$(BUILD64)/.config: $(KERNELDIR)/Makefile $(CONFDIR)/kernel64.conf $(CONFDIR)/initramfs_kernel.conf
	rm -f $(BUILD64)/usr/initramfs_data.cpio.gz
	cp $(CONFDIR)/initramfs_kernel.conf $(BUILDDIR)/initramfs_kernel.conf
	cp $(CONFDIR)/kernel64.conf $(BUILD64)/.config
	(cd $(KERNELDIR); ARCH=x86_64 make O=$(BUILD64) oldconfig )

configure: config32 config64

config32: $(BUILD32)/.config 

config64: $(BUILD64)/.config

build: build32 build64

build32: $(BUILD32)/vmlinuz 

build64: $(BUILD64)/vmlinuz

$(BUILD32)/vmlinuz: $(BUILD32)/.config $(BUILDDIR)/initramfs_kernel.conf
	echo "[1mBuilding 32bit LINBO kernel...[0m"
	( cd $(KERNELDIR) ; ARCH=i386 CFLAGS=-m32 make O=$(BUILD32) bzImage modules )

$(BUILD64)/vmlinuz: $(BUILD64)/.config $(BUILDDIR)/initramfs_kernel.conf
	echo "[1mBuilding 64bit LINBO kernel...[0m"
	( cd $(KERNELDIR) ; ARCH=x86_64 make O=$(BUILD64) bzImage modules )

distclean: clean
	rm -rf $(KERNEL_DIR)

clean: 
	rm -rf $(BUILD32)
	rm -rf $(BUILD64)
	rm -f $(BUILDDIR)/initramfs_kernel.conf

install: install32 install64

install32: $(SYSROOT32)/lib/modules/modules.dep 

install64: $(SYSROOT64)/lib/modules/modules.dep

$(SYSROOT32)/lib/modules/modules.dep: $(BUILD32)/vmlinuz
	( cd $(BUILD32) && mkdir -p $(SYSROOT32) ; make ARCH=i386 INSTALL_MOD_PATH=$(SYSROOT32) modules_install )
	( cd $(BUILD32) && mkdir -p $(SYSROOT32) ; make ARCH=i386 INSTALL_HDR_PATH=$(SYSROOT32)/usr headers_install )
	( cd $(BUILD32) && mkdir -p $(SYSROOT32) ; make ARCH=i386 INSTALL_PATH=$(SYSROOT32) install )
	/sbin/depmod -a -b $(SYSROOT32) $(KVERS)

$(SYSROOT64)/lib/modules/modules.dep: $(BUILD64)/vmlinuz
	( cd $(BUILD64) && mkdir -p $(SYSROOT64) ; make ARCH=x86_64 INSTALL_MOD_PATH=$(SYSROOT64) modules_install )
	( cd $(BUILD64) && mkdir -p $(SYSROOT64) ; make ARCH=x86_64 INSTALL_HDR_PATH=$(SYSROOT64)/usr headers_install )
	( cd $(BUILD64) && mkdir -p $(SYSROOT64) ; make ARCH=x86_64 INSTALL_PATH=$(SYSROOT64) install )
	/sbin/depmod -a -b $(SYSROOT64) $(KVERS)

.PHONY: $(DIRS)
.PHONY: distclean clean
.PHONY: build build32 build64
.PHONY: install install32 install64
.PHONY: configure config32 config64
