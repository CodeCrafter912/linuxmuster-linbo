diff -up ./docs/manual/adding-packages-generic.txt.orig ./docs/manual/adding-packages-generic.txt
--- ./docs/manual/adding-packages-generic.txt.orig	2017-09-19 20:40:42.000000000 +0200
+++ ./docs/manual/adding-packages-generic.txt	2017-09-22 23:14:46.000000000 +0200
@@ -453,6 +453,23 @@ information is (assuming the package nam
   FLAT binary format is only 4k bytes. If the application consumes more stack,
   append the required number here.
 
+* +LIBFOO_CHECK_BIN_ARCH_EXCLUSIONS+ defines a list of files that should be
+  excluded from the target architecture check. Since some packages accidentally
+  installs files that are built for the host into the target directory,
+  Buildroot adds a check that all files in the target directory are really
+  built for the target architecture. However, in rare cases, a package will
+  validly install files for a different (sub)architecture. For example, some
+  libraries have code to dynamically detect the available instructions.
+  Buildroot will then complain with an error like:
++
+---------------------
+ERROR: architecture for "/usr/lib/libfoo.so" is "Sparc v8+", should be "Sparc"
+---------------------
++
+If this is really correct, it is possible to override the check by setting
++LIBFOO_CHECK_BIN_ARCH_EXCLUSIONS+ to a space-separated list of files
+(relative to the target directory) that should not be checked.
+
 The recommended way to define these variables is to use the following
 syntax:
 
diff -up ./package/pkg-generic.mk.orig ./package/pkg-generic.mk
--- ./package/pkg-generic.mk.orig	2017-09-19 20:40:42.000000000 +0200
+++ ./package/pkg-generic.mk	2017-09-22 23:17:35.000000000 +0200
@@ -93,7 +93,8 @@ define check_bin_arch
 		support/scripts/check-bin-arch -p $(3) \
 			-l $(BUILD_DIR)/packages-file-list.txt \
 			-r $(TARGET_READELF) \
-			-a $(BR2_READELF_ARCH_NAME))
+			-a $(BR2_READELF_ARCH_NAME) \
+			-x ' $($(call UPPERCASE,$(3))_CHECK_BIN_ARCH_EXCLUSIONS) ')
 endef
 
 GLOBAL_INSTRUMENTATION_HOOKS += check_bin_arch
diff -up ./support/scripts/check-bin-arch.orig ./support/scripts/check-bin-arch
--- ./support/scripts/check-bin-arch.orig	2017-09-22 23:14:14.000000000 +0200
+++ ./support/scripts/check-bin-arch	2017-09-22 23:21:10.000000000 +0200
@@ -1,18 +1,19 @@
 #!/usr/bin/env bash
 
-while getopts p:l:r:a: OPT ; do
+while getopts p:l:r:a:x: OPT ; do
 	case "${OPT}" in
 	p) package="${OPTARG}";;
 	l) pkg_list="${OPTARG}";;
 	r) readelf="${OPTARG}";;
 	a) arch_name="${OPTARG}";;
+	x) exclusions="${OPTARG}";;
 	:) error "option '%s' expects a mandatory argument\n" "${OPTARG}";;
 	\?) error "unknown option '%s'\n" "${OPTARG}";;
 	esac
 done
 
 if test -z "${package}" -o -z "${pkg_list}" -o -z "${readelf}" -o -z "${arch_name}" ; then
-	echo "Usage: $0 -p <pkg> -l <pkg-file-list> -r <readelf> -a <arch name>"
+	echo "Usage: $0 -p <pkg> -l <pkg-file-list> -r <readelf> -a <arch name> -x ' <exclusions> '"
 	exit 1
 fi
 
@@ -36,6 +37,11 @@ while read f; do
 		continue
 	fi
 
+	# Skip files that have been excluded explicitly
+	case "${exclusions}" in
+	 *\ ${f}\ *) continue;;
+	esac
+
 	# Get architecture using readelf. We pipe through 'head -1' so
 	# that when the file is a static library (.a), we only take
 	# into account the architecture of the first object file.
